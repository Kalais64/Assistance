import { GoogleGenerativeAI } from '@google/generative-ai';

export interface ImageGenerationConfig {
  numberOfImages?: number;
  aspectRatio?: '1:1' | '16:9' | '9:16';
  style?: 'photographic' | 'digital_art' | 'sketch' | 'watercolor' | 'oil_painting';
}

export interface GeneratedImage {
  id: string;
  url: string;
  prompt: string;
  timestamp: Date;
  config: ImageGenerationConfig;
}

class GeminiImageService {
  private client: GoogleGenerativeAI;
  private apiKey: string;

  constructor() {
    this.apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || '';
    if (!this.apiKey) {
      throw new Error('Gemini API key is required');
    }
    this.client = new GoogleGenerativeAI(this.apiKey);
  }

  async generateImages(
    prompt: string,
    config: ImageGenerationConfig = {}
  ): Promise<GeneratedImage[]> {
    try {
      const numberOfImages = config.numberOfImages || 1;
      const fullPrompt = `${prompt}, style: ${config.style || 'digital art'}`;

      // API endpoint for Imagen 2
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${this.apiKey}`;
      
      const payload = {
        instances: [{ prompt: fullPrompt }],
        parameters: { "sampleCount": numberOfImages }
      };

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorBody = await response.json();
        throw new Error(`API Error: ${errorBody.error?.message || response.statusText}`);
      }
      
      const result = await response.json();
      
      if (!result.predictions || result.predictions.length === 0) {
        throw new Error('No images were generated by the API.');
      }

      const generatedImages: GeneratedImage[] = result.predictions.map((prediction: any, index: number) => {
        if (!prediction.bytesBase64Encoded) {
          throw new Error(`Image data missing in prediction index ${index}.`);
        }
        return {
          id: `img_${Date.now()}_${index}`,
          url: `data:image/png;base64,${prediction.bytesBase64Encoded}`,
          prompt: prompt,
          timestamp: new Date(),
          config
        };
      });

      return generatedImages;
      
    } catch (error) {
      console.error('Error generating images:', error);
      throw new Error(`Failed to generate images: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async downloadImage(imageUrl: string, filename: string): Promise<void> {
    try {
      const link = document.createElement('a');
      link.href = imageUrl;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error downloading image:', error);
      throw new Error('Failed to download image');
    }
  }
}

export const geminiImageService = new GeminiImageService();
